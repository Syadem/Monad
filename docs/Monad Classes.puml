@startuml
title Monad classes

interface Monadic {
    value():mixed
    flatten():mixed
    bind(Closure:function, array:args = []):monadic
    {static} create(mixed:value):monadic
}

abstract class Monad {
    #mixed:value
    __invoke():mixed
}

class Identity {
    __construct(mixed:value)
}

abstract class Option {
    {static} create(mixed:value, mixed:noneValue=null):Some|None
}

class None {
    __construct(mixed:value = null)
    value():RuntimeException
    bind(Closure:function, array:args = []):None
    {static} create(mixed:value):None
}

class Some {
    __construct(mixed:value)
    bind(Closure:function, array:args = [], mixed:noneValue=null):Some|None
}

class Match {
    #mixed:value
    #bool:isMatched
    __construct(mixed:value, bool:isMatched)
    {static} on(mixed:value):Match
    __call(string:method, array:args=[]):Match
    any(Closure:function = null, array:$args = []):Match
}

Monadic <-- Monad
Monad <-- Identity
Monad <-- Option
Option <-- None
Option <-- Some
Monadic <-- Match
@enduml